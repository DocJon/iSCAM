#if !defined(_iscam_)
#  define _iscam_

class model_data : public ad_comm{
  init_adstring data_file;
  init_adstring control_file;
  int sim;
  int rseed;
  int retro_yrs;
  data_int syr;
  data_int nyr;
  data_int sage;
  data_int nage;
  dvector age;
  data_int ngear;
  data_ivector fsh_flag;
  ivector ft_phz;
  data_number fixed_m;
  data_number linf;
  data_number vonbk;
  data_number to;
  data_number a;
  data_number b;
  data_number ah;
  data_number gh;
  dvector fa;
  dvector la;
  dvector wa;
  data_matrix catch_data;
  dmatrix obs_ct;
  int ft_count;
  data_int nit;
  data_ivector nit_nobs;
  data_3array survey_data;
  imatrix iyr;
  imatrix igr;
  dmatrix it;
  dmatrix it_wt;
  data_int na_gears;
  data_ivector na_nobs;
  data_ivector a_sage;
  data_ivector a_nage;
  data_3array A;
  data_int eof;
  double fmsy;
  double msy;
  double bmsy;
  dvector age_tau2;
  d3_array d3C;
  data_int npar;
  data_matrix theta_control;
  dvector theta_ival;
  dvector theta_lb;
  dvector theta_ub;
  ivector theta_phz;
  ivector theta_prior;
  data_ivector isel_type;
  ivector isel_npar;
  ivector jsel_npar;
  data_vector ahat;
  data_vector ghat;
  data_vector age_nodes;
  data_vector yr_nodes;
  data_ivector sel_phz;
  data_vector sel_2nd_diff_wt;
  data_vector sel_dome_wt;
  data_vector cntrl;
  int verbose;
  data_int eofc;
  int nf;
  ivector ilvec;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number_vector theta;
  param_init_bounded_matrix_vector sel_par;
  param_init_bounded_vector log_ft_pars;
  param_init_bounded_dev_vector log_rec_devs;
  objective_function_value f;
  param_number ro;
  param_number bo;
  param_number kappa;
  param_number m;
  param_number log_avgrec;
  param_number rho;
  param_number varphi;
  param_number so;
  param_number beta;
  param_vector log_rt;
  param_vector vax;
  param_vector sbt;
  param_vector rt;
  param_vector delta;
  param_matrix nlvec;
  param_matrix jlog_sel;
  param_matrix N;
  param_matrix F;
  param_matrix ft;
  param_matrix log_ft;
  param_matrix Z;
  param_matrix S;
  param_matrix ct;
  param_matrix epsilon;
  param_matrix pit;
  param_3array Ahat;
  param_3array log_sel;
  param_3array Chat;
  param_stddev_number sd_depletion;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void initialize_parameters(void);
 dvar_vector cubic_spline(const dvar_vector& spline_coffs);
 dvar_matrix cubic_spline_matrix(const dvar_matrix& spline_coffs);
  void calc_selectivities(void);
  void calc_mortality(void);
  void calc_numbers_at_age(void);
  void calc_age_proportions(void);
  void calc_fishery_observations(void);
  void calc_survey_observations(void);
  void calc_stock_recruitment(void);
  void calc_objective_function(void);
 void equilibrium(const double& fe,const double& ro, const double& kap, const double& m, const dvector& age, const dvector& wa, const dvector& fa, const dvector& va,double& re,double& ye,double& be,double& phiq,double& dphiq_df, double& dre_df);
 void calc_reference_points();
 void simulation_model(const long& seed);
 dvector cis(const dvector& na);
  void mcmc_output(void);

};
#endif
