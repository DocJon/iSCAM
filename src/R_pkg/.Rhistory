source('~/Documents/UBC_Courses/Fish_504/Tutorials2011/BrownieSim.R')
Brownie Model Simulator.
Random number seed
set.seed(8879)
I <- 3 #Number of years of marking
J <- 4 #Number of years of recaps
m <- 0.5 #true natural mortality
ni <- rpois(I,550)
fj <- rbeta(J,4,12)
P = recapture probability
Z = total mortality
F = fishing mortality
R = recaptures
P=Z=F=R=matrix(nrow=I,ncol=J)
R[i,i:J]=rmultinom(1,ni[i],p)
print(cbind(ni,R))
End of data generation.
PARAMETER_SECTION
theta = list(log.m=log(0.5),log.fj=log(fj))# rep(0.1,length=J))
itheta = as.relistable(theta)
PROCEDURE_SECTION
brownie <- function(theta)
with(relist(theta,skeleton=itheta),{
m=exp(log.m)
fj=exp(log.fj)
compute predicted recaptures given ni
P=Z=F=Rhat=matrix(nrow=I,ncol=J)
cj = fj/(m+fj)*(1-exp(-m-fj))
nll = 0
for(i in 1:I)
tmp_m=(seq(1,length(i:J),1)-1)*m
tmp_f=c(0,cumsum(fj[i:(J-1)]))
Z[i,i:J]=tmp_m + tmp_f
p=exp(-Z[i,i:J])*cj[i:J]
Rhat[i,i:J]=ni[i]*p#rmultinom(1,ni[i],p)
nll=nll   +sum(-dpois(R[i,i:J],Rhat[i,i:J],log=TRUE))
nll=nll+sum(-dmultinom(R[i,i:J],prob=p,log=TRUE))
return(nll)
})
Solver routine to estimate parameters.
solver<-function(theta,objfun,hess=FALSE)
fit<-optim(theta,objfun,method="BFGS",hessian=hess)
if(hess==TRUE)
{
H=fit$hessian     #Matrix of 2nd derivatives
V=solve(H)        #Variance covariance matrix
std=sqrt(diag(V))  #Std of parameters
R=V/(std %o% std) #Correlations.
fit$R=R; fit$std=std
return(fit)
}
fit <- solver(unlist(itheta),brownie,TRUE)
print(exp(fit$par))
source('~/Documents/UBC_Courses/Fish_504/ASSIGNMENTS/FISHGROWTH/GrowthSim.R')
dir()
source('~/Documents/UBC_Courses/Fish_504/ASSIGNMENTS/FISHGROWTH/vonB.R')
fit$par
iF<-read.table(pipe("pbpaste"))
matplot(iF)
F<-read.table(pipe("pbpaste"))
matlines(F)
0.2
sqrt(0.2)
sqrt(1-0.2)
1-sqrt(0.2)
plot(bt)
bt=scan()
mean(bt)
mean(bt[-1])
                                     ###
##  R-script for the iSCAM project                                           ###
##  Author: Steven Martell,  University of British Columbia                  ###
##  LAST MODIFIED: June 18, 2012                                             ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##  SOURCE FILES           STATUS              TODO                          ##                #
##  - read.admb.R          - working                                         ###
##  - summary.R            - working                                         ###
##  - plot.ft.R                                                              ###
##  - plot.resid.R                                                           ###
##  - iscamView.R          - working           - fix x-axis labels           ###
##  - plotCatch.R                                                            ###
##  - plotAgeComs.R                                                          ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                                                           ###
##                                      ###
#
## Global Variables:#
.VIEWTRCK	<- "iSCAMViewTracker.txt"	# filename for viewer file.#
#
## Dependencies:#
  require(PBSmodelling)#
  require(Hmisc)#
  require(ggplot2)#
  require(reshape)#
  require(grid)#
## Source files:#
  source("read.admb.R")#
  source("theme_iscam.R")#
  source("summary.R")#
  source("plot.ft.R")#
  source("plot.resid.R")#
  source("iscamView.R")#
  source("plotCatch.R")#
  source("plotAgeComps.R")#
  source("plotMeanWt.R")#
  source("plotIt.R")#
## Instructions:#
.inst <-#
function()#
{#
	cat("=====================\n")#
	cat("= type: guiView()   =\n")#
	cat("= to launch viewer  =\n")#
	cat("=====================\n")#
}#
.inst()
guiView()
theme_get()
xx<-theme_get()
dput(xx,file=test.r)
?theme_get()
xx<-theme_set()
xx<-theme_set(new)
setwd('/Users/stevenmartell/Documents/iSCAM-project/src/R_pkg')
structure(list(axis.line = structure(function (...) #
zeroGrob(), class = "theme", type = "any", call = theme_blank()), #
    axis.text.x = structure(function (label, x = xp, y = yp, #
        ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        colour = "grey50", size = base_size * 0.8, vjust = 1, #
        lineheight = 0.9)), axis.text.y = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        colour = "grey50", size = base_size * 0.8, hjust = 1, #
        lineheight = 0.9)), axis.ticks = structure(function (x0 = 0, #
        y0 = 0, x1 = 1, y1 = 1, ...) #
    {#
        segmentsGrob(x0, y0, x1, y1, ..., default.units = "npc", #
            gp = gpar(col = colour, lty = linetype, lwd = size * #
                .pt), )#
    }, class = "theme", type = "segment", call = theme_segment(colour = "grey50")), #
    axis.title.x = structure(function (label, x = xp, y = yp, #
        ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        size = base_size, vjust = 0.5)), axis.title.y = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        size = base_size, vjust = 0.5, angle = 90)), axis.ticks.length = structure(0.15, unit = "cm", valid.unit = 1L, class = "unit"), #
    axis.ticks.margin = structure(0.1, unit = "cm", valid.unit = 1L, class = "unit"), #
    legend.background = structure(function (x = 0.5, y = 0.5, #
        width = 1, height = 1, ...) #
    {#
        rectGrob(x, y, width, height, ..., gp = gpar(lwd = size * #
            .pt, col = colour, fill = fill, lty = linetype), #
            )#
    }, class = "theme", type = "box", call = theme_rect(colour = "white")), #
    legend.margin = structure(0.2, unit = "cm", valid.unit = 1L, class = "unit"), #
    legend.key = structure(function (x = 0.5, y = 0.5, width = 1, #
        height = 1, ...) #
    {#
        rectGrob(x, y, width, height, ..., gp = gpar(lwd = size * #
            .pt, col = colour, fill = fill, lty = linetype), #
            )#
    }, class = "theme", type = "box", call = theme_rect(fill = "grey95", #
        colour = "white")), legend.key.size = structure(1.2, unit = "lines", valid.unit = 3L, class = "unit"), #
    legend.key.height = NULL, legend.key.width = NULL, legend.text = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        size = base_size * 0.8)), legend.text.align = NULL, legend.title = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        face = "bold", size = base_size * 0.8, hjust = 0)), legend.title.align = NULL, #
    legend.position = "right", legend.direction = NULL, legend.justification = "center", #
    legend.box = NULL, panel.background = structure(function (x = 0.5, #
        y = 0.5, width = 1, height = 1, ...) #
    {#
        rectGrob(x, y, width, height, ..., gp = gpar(lwd = size * #
            .pt, col = colour, fill = fill, lty = linetype), #
            )#
    }, class = "theme", type = "box", call = theme_rect(fill = "grey90", #
        colour = NA)), panel.border = structure(function (...) #
    zeroGrob(), class = "theme", type = "any", call = theme_blank()), #
    panel.grid.major = structure(function (x = 0:1, y = 0:1, #
        ..., default.units = "npc") #
    {#
        polylineGrob(x, y, ..., default.units = default.units, #
            gp = gpar(lwd = size * .pt, col = colour, lty = linetype), #
            )#
    }, class = "theme", type = "line", call = theme_line(colour = "white")), #
    panel.grid.minor = structure(function (x = 0:1, y = 0:1, #
        ..., default.units = "npc") #
    {#
        polylineGrob(x, y, ..., default.units = default.units, #
            gp = gpar(lwd = size * .pt, col = colour, lty = linetype), #
            )#
    }, class = "theme", type = "line", call = theme_line(colour = "grey95", #
        size = 0.25)), panel.margin = structure(0.25, unit = "lines", valid.unit = 3L, class = "unit"), #
    strip.background = structure(function (x = 0.5, y = 0.5, #
        width = 1, height = 1, ...) #
    {#
        rectGrob(x, y, width, height, ..., gp = gpar(lwd = size * #
            .pt, col = colour, fill = fill, lty = linetype), #
            )#
    }, class = "theme", type = "box", call = theme_rect(fill = "grey80", #
        colour = NA)), strip.text.x = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        size = base_size * 0.8)), strip.text.y = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        size = base_size * 0.8, angle = -90)), plot.background = structure(function (x = 0.5, #
        y = 0.5, width = 1, height = 1, ...) #
    {#
        rectGrob(x, y, width, height, ..., gp = gpar(lwd = size * #
            .pt, col = colour, fill = fill, lty = linetype), #
            )#
    }, class = "theme", type = "box", call = theme_rect(fill = "white", #
        colour = NA)), plot.title = structure(function (label, #
        x = xp, y = yp, ..., vjust = vj, hjust = hj, default.units = "npc") #
    {#
        textGrob(label, x, y, hjust = hjust, vjust = vjust, ..., #
            default.units = default.units, gp = gpar(fontsize = size, #
                col = colour, fontfamily = family, fontface = face, #
                lineheight = lineheight), rot = angle)#
    }, class = "theme", type = "text", call = theme_text(family = base_family, #
        size = base_size * 1.2)), plot.margin = structure(c(1, #
    1, 0.5, 0.5), unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("axis.line", #
"axis.text.x", "axis.text.y", "axis.ticks", "axis.title.x", "axis.title.y", #
"axis.ticks.length", "axis.ticks.margin", "legend.background", #
"legend.margin", "legend.key", "legend.key.size", "legend.key.height", #
"legend.key.width", "legend.text", "legend.text.align", "legend.title", #
"legend.title.align", "legend.position", "legend.direction", #
"legend.justification", "legend.box", "panel.background", "panel.border", #
"panel.grid.major", "panel.grid.minor", "panel.margin", "strip.background", #
"strip.text.x", "strip.text.y", "plot.background", "plot.title", #
"plot.margin"), class = "options")
xx<-theme_set
xx<-theme_update()
xx
?theme_bw
xx<-theme_blank()
xx<-theme_bw()
dput(xx,file="test.R")
dmod <- lm(price ~ cut, data = diamonds)#
cuts <- data.frame(cut = unique(diamonds$cut), predict(dmod, data.frame(cut =#
unique(diamonds$cut)), se = TRUE)[c("fit", "se.fit")])#
se <- ggplot(cuts, aes(x = cut, y = fit, ymin = fit - se.fit,#
ymax = fit + se.fit, colour = cut))#
se + geom_pointrange()
library(plyr)#
abc <- adply(matrix(rnorm(100), ncol = 5), 2, quantile, c(0, .25, .5, .75, 1))#
b <- ggplot(abc, aes(x = X1, ymin = "0%", lower = "25%", middle = "50%", upper = "75%", ymax = "100%"))#
b + geom_boxplot(stat = "identity")
